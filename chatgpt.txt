To create a loading page that is displayed while an AJAX function is processing and stops after the AJAX request is complete, you can use the following approach. We'll use HTML, CSS, JavaScript, and AJAX to achieve this:

1. Create a new PHP file (e.g., `index.php`) and add the following content:

```html
<!DOCTYPE html>
<html>
<head>
  <title>AJAX Loading Page</title>
  <style>
    /* CSS to style the loading page */
    body {
      font-family: Arial, sans-serif;
      background-color: #f5f5f5;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .loader {
      border: 8px solid #f3f3f3;
      border-top: 8px solid #3498db;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 2s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <button onclick="loadData()">Load Data</button>
  <div id="loading" class="hidden">
    <div class="loader"></div>
  </div>

  <div id="dataContainer">
    <!-- The loaded data will be displayed here -->
  </div>
  
  <script>
    function showLoading() {
      // Show the loading animation and hide the button
      document.getElementById("loading").classList.remove("hidden");
      document.querySelector("button").style.display = "none";
    }

    function hideLoading() {
      // Hide the loading animation and show the button
      document.getElementById("loading").classList.add("hidden");
      document.querySelector("button").style.display = "block";
    }

    function loadData() {
      // Show loading animation
      showLoading();

      // Your AJAX call here
      // Replace "your_ajax_file.php" with the actual path to your AJAX processing file
      fetch("your_ajax_file.php")
        .then(response => response.text())
        .then(data => {
          // Display the data in the dataContainer div
          document.getElementById("dataContainer").innerHTML = data;

          // Hide loading animation
          hideLoading();
        })
        .catch(error => {
          console.error("Error:", error);
          // Handle error and hide loading animation
          hideLoading();
        });
    }
  </script>
</body>
</html>
```

2. Save the file (`index.php`) in your web server's document root or the appropriate folder.

In this example, we added a button element that triggers the `loadData()` JavaScript function when clicked. The function shows the loading animation (`.loader`) and hides the button while the AJAX request is in progress.

When the AJAX request is complete, the fetched data will be displayed in the `dataContainer` div, and the loading animation will be hidden, and the button will be shown again.

Replace `"your_ajax_file.php"` with the actual path to your PHP file that handles the AJAX request and returns the data. In the PHP file (`your_ajax_file.php`), you can perform any background processing or server-side operations that you need to retrieve the data.

This way, the loading page will be shown while the AJAX request is processing, and it will be hidden once the request is complete. The fetched data will be displayed in the `dataContainer` div of the page.